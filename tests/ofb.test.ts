import { describe, test, expect } from "bun:test";
import { Kalyna128, Kalyna128_256, Kalyna256, Kalyna256_512, Kalyna512, ofb } from "../src";
import { hexToBytes } from "@li0ard/gost3413/dist/utils";

describe("OFB", () => {
    test("128/128", () => {
        let a = new Kalyna128(hexToBytes("000102030405060708090A0B0C0D0E0F"));
        let iv = hexToBytes("101112131415161718191A1B1C1D1E1F")
        let pt = hexToBytes("202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F")
        let ct = hexToBytes("a19e3e5e53be8a07c9e0c01298ff832953205c661bd85a51f3a94113bc785cab634b36e89a8fdd16a12e4467f5cc5a26")

        expect(ofb(a, pt, iv)).toStrictEqual(ct);
        expect(ofb(a, ct, iv)).toStrictEqual(pt);
    })
    test("128/256", () => {
        let a = new Kalyna128_256(hexToBytes("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F"));
        let iv = hexToBytes("202122232425262728292A2B2C2D2E2F")
        let pt = hexToBytes("303132333435363738393A3B3C3D3E3F404142")
        let ct = hexToBytes("68dd0c3a243523bd2971cd2d530e712b2c53be")

        expect(ofb(a, pt, iv)).toStrictEqual(ct);
        expect(ofb(a, ct, iv)).toStrictEqual(pt);
    })

    test("256/256", () => {
        let a = new Kalyna256(hexToBytes("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F"));
        let iv = hexToBytes("202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F")
        let pt = hexToBytes("404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F90")
        let ct = hexToBytes("b62f7f144a8c6772e693a96890f064c3f06831bf743f5b0dd061067f3d22877331aa6a99d939f05b7550e9402bd1615cc7b2d4a167e83ec0d8a894f92c72e176f3880b61c311d69ce1210c59184e818e19")

        expect(ofb(a, pt, iv)).toStrictEqual(ct);
        expect(ofb(a, ct, iv)).toStrictEqual(pt);
    })
    test("256/512", () => {
        let a = new Kalyna256_512(hexToBytes("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F"));
        let iv = hexToBytes("404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F")
        let pt = hexToBytes("606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0")
        let ct = hexToBytes("0008f28a82d2d01d23bfb2f8bb4f06d8fe73ba4f48a2977585570ed3818323a668883c9dcff610cc7e3ea5c025fbbc5ca6520f8f11ca35ceb9b07031e6dbfabe39001e9a3cc0a24bbc565939592b4dedbd")

        expect(ofb(a, pt, iv)).toStrictEqual(ct);
        expect(ofb(a, ct, iv)).toStrictEqual(pt);
    })

    test("512", () => {
        let a = new Kalyna512(hexToBytes("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F"));
        let iv = hexToBytes("404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F")
        let pt = hexToBytes("808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0")
        let ct = hexToBytes("caa761980599b3ed2e945c41891bad95f72b11c73ed26536a6847458bc76c827357156b4b3fe0dc1877f5b9f17b866c37b21d89531db48007d05dec928b06766c014bb9080385edf0677e48a0a39b5e7489e28e82fffd1f84694f17296cb701656")

        expect(ofb(a, pt, iv)).toStrictEqual(ct);
        expect(ofb(a, ct, iv)).toStrictEqual(pt);
    })
})