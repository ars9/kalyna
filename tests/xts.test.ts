import { describe, test, expect } from "bun:test";
import { Kalyna128, Kalyna128_256, Kalyna256, Kalyna256_512, Kalyna512, encryptXTS, decryptXTS } from "../src";
import { hexToBytes } from "@li0ard/gost3413/dist/utils";

describe("XTS", () => {
    test("128/128", () => {
        let a = new Kalyna128(hexToBytes("000102030405060708090A0B0C0D0E0F"));
        let iv = hexToBytes("101112131415161718191A1B1C1D1E1F");
        let pt = hexToBytes("202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F");
        let ct = hexToBytes("B3E431B3FBAF31108C302669EE7116D1CF518B6D329D30618DF5628E426BDEF1");

        expect(encryptXTS(a, pt, iv)).toStrictEqual(ct);
        expect(decryptXTS(a, ct, iv)).toStrictEqual(pt);
    })
    test("128/128 (pad)", () => {
        let a = new Kalyna128(hexToBytes("000102030405060708090A0B0C0D0E0F"));
        let iv = hexToBytes("101112131415161718191A1B1C1D1E1F");
        let pt = hexToBytes("202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D");
        let ct = hexToBytes("48F3055ED2832222085005209C9D4D41B3E431B3FBAF31108C302669EE71");

        expect(encryptXTS(a, pt, iv)).toStrictEqual(ct);
        expect(decryptXTS(a, ct, iv)).toStrictEqual(pt);
    })
    test("128/256", () => {
        let a = new Kalyna128_256(hexToBytes("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F"));
        let iv = hexToBytes("202122232425262728292A2B2C2D2E2F");
        let pt = hexToBytes("303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F");
        let ct = hexToBytes("830AC78A6F629CB4C7D5D156FD84955BD0998CA1E0BC1FF135676BF2A2598FA1");

        expect(encryptXTS(a, pt, iv)).toStrictEqual(ct);
        expect(decryptXTS(a, ct, iv)).toStrictEqual(pt);
    })
    test("128/256 (pad)", () => {
        let a = new Kalyna128_256(hexToBytes("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F"));
        let iv = hexToBytes("202122232425262728292A2B2C2D2E2F");
        let pt = hexToBytes("303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758");
        let ct = hexToBytes("830AC78A6F629CB4C7D5D156FD84955B470EEFDDEE38B59F0D836B65635B0A63D0998CA1E0BC1FF135");

        expect(encryptXTS(a, pt, iv)).toStrictEqual(ct);
        expect(decryptXTS(a, ct, iv)).toStrictEqual(pt);
    })

    test("256/256", () => {
        let a = new Kalyna256(hexToBytes("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F"));
        let iv = hexToBytes("202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F");
        let pt = hexToBytes(
            "404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F" +
            "707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F"
        );
        let ct = hexToBytes(
            "E0E51EAEA6A3134600758EA7F87E88025D8B82897C8DB099B843054C3A51883756913571530BA8FA23003E337627E698" +
            "674B807E847EC6B2292627736562F9F62B2DE9E6AAC5DF74C09A0C5CF80280174AEC9BDD4E73F7D63EDBC29A6922637A"
        );

        expect(encryptXTS(a, pt, iv)).toStrictEqual(ct);
        expect(decryptXTS(a, ct, iv)).toStrictEqual(pt);
    })
    test("256/256 (pad)", () => {
        let a = new Kalyna256(hexToBytes("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F"));
        let iv = hexToBytes("202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F");
        let pt = hexToBytes(
            "404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F" +
            "707172737475767778797A7B7C7D7E7F80"
        );
        let ct = hexToBytes(
            "E0E51EAEA6A3134600758EA7F87E88025D8B82897C8DB099B843054C3A5188374F5254E38066B77FA14FEE3292464B60" +
            "7E8AF1398B2A91C4480B698D64D13AE856"
        );

        expect(encryptXTS(a, pt, iv)).toStrictEqual(ct);
        expect(decryptXTS(a, ct, iv)).toStrictEqual(pt);
    })
    test("256/512", () => {
        let a = new Kalyna256_512(hexToBytes("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F"));
        let iv = hexToBytes("404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F");
        let pt = hexToBytes(
            "606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F" +
            "909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF"
        );
        let ct = hexToBytes(
            "30663E4686574B343A1898E46973CD37DB9D775D356512EB59E723397F2A333CE2C0E96538781FF48EA1D93BDF88FFF8" +
            "BB7BC4FB80A609881220C7FE21881C7374F65B232A8F94CD0E3DDC7614830C23CFCE98ADC5113496F9E106E8C8BFF3AB"
        );

        expect(encryptXTS(a, pt, iv)).toStrictEqual(ct);
        expect(decryptXTS(a, ct, iv)).toStrictEqual(pt);
    })
    test("256/512 (pad)", () => {
        let a = new Kalyna256_512(hexToBytes("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F"));
        let iv = hexToBytes("404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F");
        let pt = hexToBytes(
            "606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F" +
            "909192939495969798999A9B9C9D9E9FA0"
        );
        let ct = hexToBytes(
            "30663E4686574B343A1898E46973CD37DB9D775D356512EB59E723397F2A333C6DE04CB3235A2DA92493537248DE4368" +
            "879A7CC4166B25C9BFD1AD8EAEA3484BE2"
        );

        expect(encryptXTS(a, pt, iv)).toStrictEqual(ct);
        expect(decryptXTS(a, ct, iv)).toStrictEqual(pt);
    })

    test("512", () => {
        let a = new Kalyna512(hexToBytes("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F"));
        let iv = hexToBytes(
            "404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F" +
            "707172737475767778797A7B7C7D7E7F"
        );
        let pt = hexToBytes(
            "808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF" +
            "B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF" +
            "E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF"
        );
        let ct = hexToBytes(
            "5C6250BD2E40AAE27E1E57512CD38E6A51D0C2B04F0D6A50E0CB43358B8C4E8BA361331436C6FFD38D77BBBBF5FEC56A" +
            "234108A6CC8CB298360943E849E5BD64D26ECA2FA8AEAD070656C3777BA412BCAF3D2F08C26CF86CA8F0921043A15D70" +
            "9AE1112611E22D4396E582CCB661E0F778B6F38561BC338AFD5D1036ED8B322D"
        );

        expect(encryptXTS(a, pt, iv)).toStrictEqual(ct);
        expect(decryptXTS(a, ct, iv)).toStrictEqual(pt);
    })
    test("512 (pad)", () => {
        let a = new Kalyna512(hexToBytes("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F"));
        let iv = hexToBytes(
            "404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F" +
            "707172737475767778797A7B7C7D7E7F"
        );
        let pt = hexToBytes(
            "808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF" +
            "B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF" +
            "E0"
        );
        let ct = hexToBytes(
            "C2822787D3CB2D13168B126583CF28E3B194F153088CF46BD745B22D1776BCB035C6CB17D8C1FBD127954C2A5D5F5AFB" +
            "ECF976E34966AB85142192A2463A541F5C6250BD2E40AAE27E1E57512CD38E6A51D0C2B04F0D6A50E0CB43358B8C4E8B" +
            "A3"
        );

        expect(encryptXTS(a, pt, iv)).toStrictEqual(ct);
        expect(decryptXTS(a, ct, iv)).toStrictEqual(pt);
    })
})