import { describe, test, expect } from "bun:test";
import { Kalyna128, Kalyna128_256, Kalyna256, Kalyna256_512, Kalyna512, encryptCFB, decryptCFB } from "../src";
import { hexToBytes } from "@li0ard/gost3413/dist/utils";

describe("CFB", () => {
    test("128/128", () => {
        let a = new Kalyna128(hexToBytes("000102030405060708090A0B0C0D0E0F"));
        let iv = hexToBytes("101112131415161718191A1B1C1D1E1F");
        let pt = hexToBytes("202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F");
        let ct = hexToBytes("A19E3E5E53BE8A07C9E0C01298FF83291F8EE6212110BE3FA5C72C88A082520B265570FE28680719D9B4465E169BC37A");

        expect(encryptCFB(a, pt, iv)).toStrictEqual(ct);
        expect(decryptCFB(a, ct, iv)).toStrictEqual(pt);
    })
    test("128/256", () => {
        let a = new Kalyna128_256(hexToBytes("1F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100"));
        let iv = hexToBytes("2F2E2D2C2B2A29282726252423222120");
        let pt = hexToBytes("26319A368D85DE43DD5FDB928D91A441493D8CE07B64797C8F9676C5921CD1EA743F5E2777C327AC58");
        let ct = hexToBytes("5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837");

        expect(encryptCFB(a, pt, iv, 8)).toStrictEqual(ct);
        expect(decryptCFB(a, ct, iv, 8)).toStrictEqual(pt);
    })

    test("256/256", () => {
        let a = new Kalyna256(hexToBytes("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F"));
        let iv = hexToBytes("202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F");
        let pt = hexToBytes(
            "404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F" +
            "707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F90"
        );
        let ct = hexToBytes(
            "E07821AF642F4B1DC071166F2D329763C2CF3B9E39CD0B52BDD33A0DC7B6B6BB201C4A1CD0F5DCB693ABEEA120DACA3A" +
            "29C73D1D6E87FD75B7DE9E3BE4D256791C2E44583DE8E061E45834A24262BDEBBE"
        );

        expect(encryptCFB(a, pt, iv, 16)).toStrictEqual(ct);
        expect(decryptCFB(a, ct, iv, 16)).toStrictEqual(pt);
    })
    test("256/512", () => {
        let a = new Kalyna256_512(hexToBytes("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F"));
        let iv = hexToBytes("404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F");
        let pt = hexToBytes(
            "606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F" +
            "909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0"
        );
        let ct = hexToBytes(
            "0008F28A82D2D01D23BFB2F8BB4F06D8FE73BA4F48A2977585570ED3818323A6DBAD3D9DD580D9D8F787CE55FAB90735" +
            "F6B2D6152D56C0C787E6F4B6A2F557DF707A671D06AED196DD7D7E2320D8E45C4C"
        );

        expect(encryptCFB(a, pt, iv)).toStrictEqual(ct);
        expect(decryptCFB(a, ct, iv)).toStrictEqual(pt);
    })

    test("512", () => {
        let a = new Kalyna512(hexToBytes("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F"));
        let iv = hexToBytes(
            "404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F" + 
            "707172737475767778797A7B7C7D7E7F"
        );
        let pt = hexToBytes(
            "808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF" +
            "B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF" +
            "E0"
        );
        let ct = hexToBytes(
            "CAA761980599B3ED2E945C41891BAD95F72B11C73ED26536A6847458BC76C827357156B4B3FE0DC1877F5B9F17B866C3" +
            "7B21D89531DB48007D05DEC928B06766C67D6F3F4C2B82D7A836FAD160905C1C7576243877DC3ADE4AA057966E0023F0" +
            "69"
        );

        expect(encryptCFB(a, pt, iv)).toStrictEqual(ct);
        expect(decryptCFB(a, ct, iv)).toStrictEqual(pt);
    })
})